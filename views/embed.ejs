<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UniTalk Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js" integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+" crossorigin="anonymous"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        .chat-container {
            width: 100vw;
            height: 100vh;
            display: flex;
            flex-direction: column;
            background: #f8f9fa;
        }

        .chat-header {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background: #007bff;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 18px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 1000;
        }

        .chat-main {
            display: flex;
            flex: 1;
        }

        .chat-list {
            position: fixed;
            top: 57px;
            left: 0;
            width: 90px;
            height: calc(100% - 133px);
            background: #343a40;
            padding: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            overflow-y: auto;
        }

        .chat-list button {
            background: transparent;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 20px;
        }

        .chat-box {
            margin-top: 57px;
            margin-left: 90px;
            margin-bottom: 60px;
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            height: calc(100% - 133px);
        }

        .message {
            padding: 10px 15px;
            border-radius: 10px;
            margin: 5px;
            max-width: 70%;
            word-wrap: break-word;
        }

        .icon.user {
            color: black;
            align-self: flex-end;
        }

        .icon.other {
            color: black;
            align-self: flex-start;
        }

        .message.user {
            background: #007bff;
            color: white;
            align-self: flex-end;
        }

        .message.other {
            background: #e9ecef;
            color: black;
            align-self: flex-start;
        }

        .chat-footer {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            display: flex;
            padding: 15px;
            border-top: 1px solid #ccc;
            background: white;
            align-items: center;
            gap: 10px;
        }

        .chat-footer input[type="text"] {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .chat-footer button {
            padding: 10px 15px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        /* Tombol upload */
        .upload-button {
            background: transparent;
            border: none;
            cursor: pointer;
            font-size: 20px;
            color: #007bff;
        }

        .upload-button:hover {
            color: #0056b3;
        }

        /* Sembunyikan input file */
        #attachmentInput {
            display: none;
        }

        /* Gaya untuk Pop-up Formulir */
        .popup-form {
            display: none;
            position: fixed;
            bottom: 80px;
            left: 20px;
            background-color: white;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            z-index: 1001;
            padding: 20px;
            border-radius: 5px;
        }

        .popup-content {
            display: flex;
            flex-direction: column;
        }

        .popup-content label {
            margin-top: 10px;
        }

        .popup-content input {
            padding: 8px;
            margin-top: 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .popup-content button {
            margin-top: 15px;
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .close-button {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            font-size: 20px;
        }

    </style>
</head>
<body>

    <div class="chat-container">
        <div class="chat-header">
            UniTalk Chat
        </div>

        <div class="chat-main">
            <div class="chat-list" id="chatList"></div>

            <div class="chat-box" id="chatBox">
                <p class="message other">Pilih chat untuk memulai obrolan</p>
            </div>
        </div>

        <form id="uploadForm" enctype="multipart/form-data">
            <div class="chat-footer">
                <button type="button" id="addChatButton" class="add-chat-button"><i class="fa fa-plus"></i></button>
                <input type="file" id="attachmentInput" name="attachment" style="display: none;">
                <button type="button" id="attachButton"><i class="fa fa-paperclip"></i></button>
                <input type="text" id="messageInput" placeholder="Ketik pesan...">
                <button type="submit" id="sendButton">Kirim</button>
            </div>
        </form>
    </div>

    <div class="popup-form" id="popupForm">
        <div class="popup-content">
            <span class="close-button" id="closePopupButton">&times;</span>
            <h2>Buat Chat Baru</h2>
            <form id="newChatForm">
                <label for="receiverId">ID Receiver:</label>
                <input type="text" id="receiverId" name="receiverId">
                <label for="groupId">ID Group:</label>
                <input type="text" id="groupId" name="groupId">
                <button type="submit">Simpan</button>
            </form>
        </div>
    </div>

    <script>
        const api_key = '<%= api_key %>';
        const id_sender = '<%= id_sender %>';
        //test socket

        const socket = io('http://localhost:5000', {
            query: {
                id_sender: id_sender,
            }
        }); 
        let selectedChatId = null;
        let selectedChatIsGroup = null;
        let senderName = '';
        let isGroup = false;

        function selectChat(chatId, isGroup = false) {
            selectedChatId = chatId;
            selectedChatIsGroup = isGroup
            const chatBox = document.getElementById("chatBox");
            chatBox.innerHTML = `<p class="message other">Memuat obrolan dengan ${chatId}...</p>`;

            if (isGroup){
                socket.emit('joinGroup', chatId);
            }

            const endpoint = isGroup
            ? `/api/chats/get-group-chat-history?api_key=${api_key}&id_reference=${chatId}`
            : `/api/chats/get-chat-history?api_key=${api_key}&id_sender=${id_sender}&id_receiver=${chatId}`;


            // Melakukan permintaan fetch untuk mendapatkan riwayat obrolan
            fetch(endpoint)
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'Riwayat obrolan berhasil diambil') {
                        // Menghapus pesan pemuatan
                        chatBox.innerHTML = '';

                        // Menampilkan setiap pesan dalam urutan kronologis
                        data.chats.forEach(chat => {
                            const senderType = chat.id_sender === id_sender ? 'user' : 'other';
                            if (chat.pesan !== null) {
                                addMessage(chat.pesan, senderType, isGroup, chat.id_sender);
                            } else if (chat.attachment) {
                                const linkElement = document.createElement('img');
                                linkElement.src = `/database/attachments/${chat.attachment}`;
                                linkElement.target = '_blank';
                                linkElement.style = 'max-width:150px;max-height:150px;color:black; text-decoration:none;'
                                addMessage(linkElement, senderType, isGroup, chat.id_sender);
                            }
                        });
                    } else {
                        chatBox.innerHTML = `<p class="message other">Gagal memuat obrolan dengan ${chatId}</p>`;
                    }
                })
                .catch(error => {
                    console.error('Error fetching chat history:', error);
                    chatBox.innerHTML = `<p class="message other">Terjadi kesalahan saat memuat obrolan dengan ${chatId}</p>`;
                });    
        }

        function joinGroup(groupId) {
            socket.emit('joinGroup', groupId);
        }

        function addMessage(pesan, sender, isGroup = false, senderName) {
            const chatBox = document.getElementById("chatBox");
            const messageElement = document.createElement("p");
            messageElement.classList.add("message", sender);
            const name = senderName

            if (isGroup) {
                const userIcon = document.createElement("i");
                userIcon.classList.add("fa-solid","fa-user", "icon", sender, "pe-2", "ps-2")
                const userId = document.createElement("span");
                userId.classList.add("ps-2");
                userId.textContent = name;
                userIcon.appendChild(userId);
                chatBox.appendChild(userIcon)
            }

            if (typeof pesan === 'string') {
                messageElement.textContent = pesan;
            } else {
                messageElement.appendChild(pesan);
            }
            chatBox.appendChild(messageElement);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        // Menerima pesan baru
        socket.on('newMessage', (data) => {
            console.log("hit api newMessage1")
            if (data.id_sender !== id_sender) {
                const senderType = 'other';
                addMessage(data.pesan, senderType, selectedChatIsGroup, data.id_sender);
            }
        });


        fetch(`/api/chats/get-chats?api_key=${api_key}&id_sender=${id_sender}`)
            .then(response => response.json())
            .then(data => {
                console.log("hit api get chats");
                const chatList = document.getElementById("chatList");
                chatList.innerHTML = "";

                // Menggunakan Map untuk melacak chatId dan tipe obrolan
                const chatMap = new Map();

                data.chats.forEach(chat => {
                    let chatId;
                    let isGroup = false;

                    if (chat.id_reference && !chat.id_receiver) {
                        // Ini adalah pesan grup
                        chatId = chat.id_reference;
                        isGroup = true;
                    } else {
                        // Ini adalah pesan pribadi
                        chatId = chat.id_sender === id_sender ? chat.id_receiver : chat.id_sender;
                    }

                    // Membuat kunci unik berdasarkan chatId dan tipe obrolan
                    const chatKey = `${chatId}-${isGroup ? 'group' : 'private'}`;

                    if (!chatMap.has(chatKey)) {
                        chatMap.set(chatKey, { chatId, isGroup });

                        const button = document.createElement("button");
                        button.innerHTML = isGroup
                            ? `<i class="fa-solid fa-users"><span class="ps-2">${chatId}</span></i>`
                            : `<i class="fa-solid fa-user"><span class="ps-2">${chatId}</span></i>`;
                        button.onclick = () => selectChat(chatId, isGroup);
                        chatList.appendChild(button);
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching chat list:', error);
            });

        // Handle upload file
        document.getElementById("attachButton").addEventListener("click", () => {
            document.getElementById("attachmentInput").click();
        });

        // Ketika form di-submit, unggah file
        document.getElementById('uploadForm').addEventListener('submit', (event) => {
            event.preventDefault();

            const attachmentInput = document.getElementById('attachmentInput');
            const messageInput = document.getElementById('messageInput');
            const file = attachmentInput.files[0];
            const pesan = messageInput.value.trim();

            if (file && selectedChatId) {
                const formData = new FormData();
                formData.append('attachment', file);
                formData.append('api_key', api_key);
                formData.append('id_sender', id_sender);
                formData.append('id_receiver', selectedChatIsGroup ? '' : selectedChatId);
                formData.append('id_reference', selectedChatIsGroup ? selectedChatId : '');

                fetch('/upload', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'File uploaded successfully') {
                    // Tampilkan lampiran di area chat
                    const linkElement = document.createElement('img');
                    linkElement.src = `/database/attachments/${data.data.attachment}`;
                    linkElement.target = '_blank';
                    linkElement.style = 'max-width:150px;max-height:150px;color:black'
                    linkElement.textContent = '📎 ',data.data.attachment;
                    addMessage(linkElement, 'user', selectedChatIsGroup, id_sender);
                } else {        
                    console.log("ga kesimpan")            
                    console.error('Error uploading file:', data.error);
                }
                })
                .catch(error => {
                    console.error('Error uploading file:', error);
                });
                messageInput.placeholder = 'Ketik pesan...';
                messageInput.disabled = false;
            }

            if (pesan && selectedChatId) {
                // Kirim pesan teks melalui Socket.IO
                socket.emit('sendMessage', {
                    api_key,
                    id_sender,
                    id_receiver: selectedChatIsGroup ? null : selectedChatId,
                    id_reference: selectedChatIsGroup ? selectedChatId : null,
                    pesan
                });

                addMessage(pesan, 'user', selectedChatIsGroup, id_sender);
                messageInput.value = '';
            }

            // Reset input file
            attachmentInput.value = '';
        });

        socket.on('newAttachment', (data) => {
            if (data.id_sender !== id_sender) {
                const senderType = 'other';
                console.log("hit api newAttachment2")
                const linkElement = document.createElement('img');
                    linkElement.src = `/database/attachments/${data.attachment}`;
                    linkElement.target = '_blank';
                    linkElement.style = 'max-width:150px;max-height:150px;color:black'
                    linkElement.textContent = '📎 '+ data.attachment;
                    addMessage(linkElement, 'other', selectedChatIsGroup, id_sender);
            }
        });

        document.getElementById('attachmentInput').addEventListener('change', function(event) {
            const messageInput = document.getElementById('messageInput');
            if (event.target.files.length > 0) {
                const fileName = event.target.files[0].name;
                messageInput.placeholder = '📎 '+ fileName;
                messageInput.disabled = true; // Menonaktifkan input pesan
            } else {
                messageInput.value = '';
                messageInput.disabled = false; // Mengaktifkan kembali jika tidak ada file
            }
        });
//test
        document.addEventListener('DOMContentLoaded', function () {
            const addChatButton = document.getElementById('addChatButton');
            const popupForm = document.getElementById('popupForm');
            const closePopupButton = document.getElementById('closePopupButton');
            const newChatForm = document.getElementById('newChatForm');
            const receiverIdInput = document.getElementById('receiverId');
            const groupIdInput = document.getElementById('groupId');
            const chatList = document.getElementById('chatList');

            // Fungsi untuk membuka pop-up
            addChatButton.addEventListener('click', function () {
                popupForm.style.display = 'block';
            });

            // Fungsi untuk menutup pop-up
            closePopupButton.addEventListener('click', function () {
                popupForm.style.display = 'none';
            });

            // Fungsi untuk menambahkan chat baru ke daftar chat
            newChatForm.addEventListener('submit', function (e) {
                e.preventDefault();
                const receiverId = receiverIdInput.value.trim();
                const groupId = groupIdInput.value.trim();

                // Validasi input: hanya salah satu field yang boleh diisi
                if ((receiverId && groupId) || (!receiverId && !groupId)) {
                    alert('Harap isi salah satu field saja.');
                    return;
                }

                // Tentukan ID yang akan digunakan
                const chatId = receiverId || groupId;

                // Tambahkan tombol chat baru ke daftar chat
                const button = document.createElement('button');
                if (receiverId){
                    button.innerHTML = `<i class="fa-solid fa-user"><span class="ps-2">${chatId}</span></i>`;
                    button.onclick = () => selectChat(chatId);
                } else if(groupId){
                    isGroup = true;
                    button.innerHTML = `<i class="fa-solid fa-users"><span class="ps-2">${chatId}</span></i>`;
                    button.onclick = () => selectChat(chatId, isGroup);
                }
                chatList.appendChild(button);

                // Reset form dan tutup pop-up
                receiverIdInput.value = '';
                groupIdInput.value = '';
                popupForm.style.display = 'none';
            });
        });

    </script>
</body>
</html>
