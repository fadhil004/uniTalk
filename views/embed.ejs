<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UniTalk Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js" integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+" crossorigin="anonymous"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        .chat-container {
            width: 100vw;
            height: 100vh;
            display: flex;
            flex-direction: column;
            background: #f8f9fa;
        }

        .chat-header {
            background: #007bff;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 18px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-main {
            display: flex;
            flex: 1;
            overflow: hidden;
        }

        .chat-list {
            width: 90px;
            background: #343a40;
            padding: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }

        .chat-list button {
            background: transparent;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 20px;
        }

        .chat-box {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
        }

        .message {
            padding: 10px 15px;
            border-radius: 10px;
            margin: 5px;
            max-width: 70%;
            word-wrap: break-word;
        }

        .message.user {
            background: #007bff;
            color: white;
            align-self: flex-end;
        }

        .message.other {
            background: #e9ecef;
            color: black;
            align-self: flex-start;
        }

        .chat-footer {
            display: flex;
            padding: 15px;
            border-top: 1px solid #ccc;
            background: white;
            align-items: center;
            gap: 10px;
        }

        .chat-footer input[type="text"] {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .chat-footer button {
            padding: 10px 15px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        /* Tombol upload */
        .upload-button {
            background: transparent;
            border: none;
            cursor: pointer;
            font-size: 20px;
            color: #007bff;
        }

        .upload-button:hover {
            color: #0056b3;
        }

        /* Sembunyikan input file */
        #attachmentInput {
            display: none;
        }

    </style>
</head>
<body>

    <div class="chat-container">
        <div class="chat-header">
            UniTalk Chat
        </div>

        <div class="chat-main">
            <div class="chat-list" id="chatList"></div>

            <div class="chat-box" id="chatBox">
                <p class="message other">Pilih chat untuk memulai obrolan</p>
            </div>
        </div>

        <div class="chat-footer">
            <input type="file" id="attachmentInput" style="display: none;">
            <button id="attachButton"><i class="fa fa-paperclip"></i></button>
            <input type="text" id="messageInput" placeholder="Ketik pesan...">
            <button id="sendButton">Kirim</button>
        </div>        
    </div>

    <script>
        const api_key = '<%= api_key %>';
        const id_sender = '<%= id_sender %>';
        //test socket

        const socket = io('http://localhost:5000', {
            query: {
                id_sender: id_sender,
            }
        }); 
        let selectedChatId = null;

        function selectChat(chatId) {
            selectedChatId = chatId;
            const chatBox = document.getElementById("chatBox");
            chatBox.innerHTML = `<p class="message other">Memuat obrolan dengan ${chatId}...</p>`;

            // Melakukan permintaan fetch untuk mendapatkan riwayat obrolan
            fetch(`/api/chats/get-chat-history?api_key=${api_key}&id_sender=${id_sender}&id_receiver=${chatId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'Riwayat obrolan berhasil diambil') {
                        // Menghapus pesan pemuatan
                        chatBox.innerHTML = '';

                        // Menampilkan setiap pesan dalam urutan kronologis
                        data.chats.forEach(chat => {
                            const senderType = chat.id_sender === id_sender ? 'user' : 'other';
                            addMessage(chat.pesan, senderType);
                        });
                    } else {
                        chatBox.innerHTML = `<p class="message other">Gagal memuat obrolan dengan ${chatId}</p>`;
                    }
                })
                .catch(error => {
                    console.error('Error fetching chat history:', error);
                    chatBox.innerHTML = `<p class="message other">Terjadi kesalahan saat memuat obrolan dengan ${chatId}</p>`;
                });    
        }

        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const pesan = messageInput.value.trim();

            if (pesan && selectedChatId) {
                socket.emit('sendMessage', {
                    api_key,
                    id_sender,
                    id_receiver: selectedChatId,
                    pesan
                });

                addMessage(pesan, 'user');
                messageInput.value = '';
            }
        }

        document.getElementById('sendButton').addEventListener('click', sendMessage);

        function addMessage(pesan, sender) {
            const chatBox = document.getElementById("chatBox");
            const messageElement = document.createElement("p");
            messageElement.classList.add("message", sender);
            messageElement.textContent = pesan;
            chatBox.appendChild(messageElement);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        // Menerima pesan baru
        socket.on('newMessage', (data) => {
            console.log("hit api newMessage1")
            console.log("data.id_sender: ",data.id_sender)
            console.log("data.id_receiver: ",data.id_receiver)
            console.log("id_sender: ", id_sender)
            console.log("id_receiver: ", selectedChatId)
            if (data.id_sender === selectedChatId || data.id_receiver === selectedChatId) {
                const senderType = data.id_sender === id_sender ? 'user' : 'other';
                console.log("hit api newMessage2")
                addMessage(data.pesan, senderType);
            }
        });


        fetch(`/api/chats/get-chats?api_key=${api_key}&id_sender=${id_sender}`)
            .then(response => response.json())
            .then(data => {
                console.log("hit api")
                const chatList = document.getElementById("chatList");
                chatList.innerHTML = "";

                const addedReceivers = new Set();
                data.chats.forEach(chat => {
                    if (chat.id_receiver === id_sender || addedReceivers.has(chat.id_receiver)) {
                        return;
                    }
                    addedReceivers.add(chat.id_receiver);

                    const button = document.createElement("button");
                    button.innerHTML = `<i class="fa-solid fa-user"><span class="ps-2">${chat.id_receiver} </span></i>`;
                    button.onclick = () => selectChat(chat.id_receiver);
                    chatList.appendChild(button);
                });    
            })

        // Handle upload file
        document.getElementById("attachButton").addEventListener("click", () => {
            document.getElementById("attachmentInput").click();
        });

        document.getElementById("attachmentInput").addEventListener("change", (event) => {
            const file = event.target.files[0];

            if (file && selectedChatId) {
                const reader = new FileReader();
                reader.onload = () => {
                    const fileData = reader.result;
                    socket.send(JSON.stringify({ 
                        type: "sendFile", 
                        fileName: file.name,
                        fileData,
                        id_sender: currentUserId,
                        id_receiver: selectedChatId
                    }));

                    addMessage(`ðŸ“Ž ${file.name}`, "user");
                };
                reader.readAsDataURL(file);
            }
        });

    </script>
</body>
</html>
